Пусть имеется определение следующего простого класса: 
class Person { 
private: 
static const LIMIT = 25; 
string lname; // фамилия 
char fname [LIMIT] ; // имя 
public: 
Person () { lname = ""; fname [0] = '\0'; } // #1 
Person (const string & In, const char * f n = "Heyyou"); // #2 
// Следующие методы отображают lname и fname 
void Show() const; // формат: имя фамилия 
void FormalShowO const; // формат: фамилия, имя 
}; 
(В нем используется объект string и символьный массив, так что вы сможете 
сравнить применение этих двух форм.) Напишите программу, которая дополнит 
реализацию за счет предоставления кода для пока еще не определенных  
методов. В программе, использующей класс, должны также присутствовать вызовы 
трех возможных конструкторов (без аргументов, с одним аргументом, с двумя 
аргументами) и двух методов отображения. Ниже приведен пример применения 
этих конструкторов и методов: 
Person one; // используется конструктор по умолчанию 
Person two("Smythecraft"); // используется конструктор #2 
//с одним аргументом по умолчанию 
Person three("Dimwiddy", "Sam"); // используется конструктор #2, 
// без аргументов по умолчанию 
one.Show () ; 
cout « endl; 
one.FormalShow(); 
// и т.д. для объектов two и three 
