 Простой список можно описать следующим образом:
• простой список может содержать ноль или более элементов определенноготипа;
• можно создавать пустой список;
• можно добавлять элемент в список;
• можно определять, пуст ли список;
• можно полон ли список.определять;
• можно посетить каждый элемент списка и выполнить над ним определенноедействие.

Как видите, список действительно прост; так, например, он не позволяет осуществлять вставку или удаление элементов.
Спроектируйте класс List для представления этого абстрактного типа. 
Выдолжны подготовить заголовочный файл list.h с объявлением класса и файл list.cpp с реализацией его методов.
Вы должны также написать короткую программу, которая будет использовать полученный класс.
Главная причина того, что спецификация списка проста, связана с попыткой упростить это упражнение. 
Вы можете реализовать список в виде массива или же в виде связного списка, если знакомы с этим типом данных.
Однако открытый интерфейс не должен зависеть от вашего выбора. То есть открытый интерфейсне должен иметь индексов массива,
указателей на узлы и т.п. Он должен быть выражен в виде общих концепций создания списка, добавления элемента в списоки т.д.

Обычный способ посещением каждого элемента в списке и управления выполнения над ним каких-то действий состоит в применении функции,
которая принимает указатель на другую функцию в качестве аргумента:
void visit(void (*pf) (Item &) ) ;
Здесь pf указывает на функцию (не функцию-член), которая принимает ссылкуна аргумент типа Item, 
где Item — это тип элементов списка, visit () применяетэту функцию к каждому элементу списка. 
В качестве общего руководства можете воспользоваться классом Stack.
